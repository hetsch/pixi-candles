{"version":3,"file":"PlotGradient.js","sourceRoot":"","sources":["PlotGradient.ts"],"names":[],"mappings":"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","sourcesContent":["import {Buffer, Geometry, Program, Texture, Renderer} from '@pixi/core';\nimport {CanvasRenderer} from '@pixi/canvas-renderer';\nimport {Mesh, MeshMaterial} from '@pixi/mesh';\nimport {createIndicesForQuads, hex2string, rgb2hex, hex2rgb} from '@pixi/utils';\nimport {LINE_JOIN} from '@pixi/graphics';\nimport {TYPES} from '@pixi/constants';\n\nimport {Plot, PlotGeometry} from './Plot';\n\nconst gradVert = `\nattribute vec2 aVertexPosition;\n\nuniform mat3 projectionMatrix;\nuniform mat3 translationMatrix;\nuniform vec2 rangeY;\n\nvarying float vOrdinate;\n\nvoid main(void)\n{\nvec2 pos = (translationMatrix * vec3(aVertexPosition, 1.0)).xy;\nif (pos.y > rangeY.y) {\n    pos.y = rangeY.y;\n}\ngl_Position = vec4((projectionMatrix * vec3(pos, 1.0)).xy, 0.0, 1.0);\nvOrdinate = pos.y;\n}`;\nconst gradFrag = `\nvarying float vOrdinate;\n\nuniform vec4 colorTop;\nuniform vec4 colorBottom;\nuniform vec4 uColor;\nuniform vec2 rangeY2;\n\nvoid main(void)\n{\nvec4 color = colorTop;\nif (vOrdinate > rangeY2.x) {\n    if (vOrdinate >= rangeY2.y) {\n        color = colorBottom;\n    } else {\n        color = colorTop + (colorBottom - colorTop) * (vOrdinate - rangeY2.x) / (rangeY2.y - rangeY2.x);\n    }\n}\n\ncolor.rgb *= color.a;\ngl_FragColor = color * uColor;\n}\n`;\n\nexport class PlotGradientShader extends MeshMaterial {\n    static _prog: Program = null;\n\n    static getProgram(): Program {\n        if (!PlotGradientShader._prog) {\n            PlotGradientShader._prog = new Program(gradVert, gradFrag);\n        }\n        return PlotGradientShader._prog;\n    }\n\n    constructor() {\n        const rangeY = new Float32Array(2);\n        super(Texture.WHITE, {\n            uniforms: {\n                resolution: 1,\n                colorTop: new Float32Array([1, 1, 1, 1]),\n                colorBottom: new Float32Array([1, 1, 1, 1]),\n                rangeY: rangeY,\n                rangeY2: rangeY,\n            },\n            program: PlotGradientShader.getProgram()\n        });\n    }\n}\n\nexport class PlotGradientGeometry extends Geometry {\n    constructor(_static = false) {\n        super();\n        this.initGeom(_static);\n        this.reset();\n    }\n\n    lastLen = 0;\n    lastPointNum = 0;\n    lastPointData = 0;\n    points: Array<number> = [];\n    _floatView: Float32Array = null;\n    _buffer: Buffer = null;\n\n    initGeom(_static: boolean) {\n        this._buffer = new Buffer(new Float32Array(0), _static, false);\n\n        this.addAttribute('aVertexPosition', this._buffer, 2, false, TYPES.FLOAT);\n    }\n\n    stridePoints = 2;\n    strideFloats = 2 * 6;\n    strideBytes = 8 * 6;\n\n    moveTo(x: number, y: number) {\n        const {points} = this;\n        points.push(x);\n        points.push(y);\n    }\n\n    lineTo(x: number, y: number) {\n        const {points} = this;\n        points.push(x);\n        points.push(y);\n    }\n\n    invalidate(pointNum = 0) {\n        this.lastPointNum = Math.min(pointNum, this.lastPointNum);\n    }\n\n    reset() {\n        if (this.lastLen > 0) {\n            this.clearBufferData();\n        }\n        this.lastLen = 0;\n        this.lastPointData = 0;\n        this.points.length = 0;\n    }\n\n    clearBufferData() {\n        const {points, strideFloats, stridePoints} = this;\n        this.lastPointNum = 0;\n        this.lastPointData = 0;\n        const arrayLen = Math.max(0, points.length / stridePoints - 1);\n        this._floatView = new Float32Array(strideFloats * arrayLen);\n        this._buffer.update(this._floatView);\n        this.lastLen = points.length;\n    }\n\n    updateBuffer() {\n        const {points, stridePoints, strideFloats} = this;\n\n        if (this.lastLen > points.length) {\n            this.lastLen = -1;\n        }\n        if (this.lastLen < points.length\n            || this.lastPointNum < this.lastLen) { // TODO: partial upload\n            this.clearBufferData();\n        }\n\n        if (this.lastPointNum == this.lastLen) {\n            return;\n        }\n\n        const {_floatView} = this;\n        this.lastPointData = Math.min(this.lastPointData, this.lastPointNum);\n        let j = Math.round(this.lastPointNum * strideFloats / stridePoints);\n        for (let i = this.lastPointNum; i < points.length - stridePoints; i += stridePoints) {\n            const next = i + stridePoints;\n\n            const x = points[i], y = points[i + 1], x2 = points[next], y2 = points[next + 1];\n\n            const bottomLine = 10000.0;\n\n            _floatView[j++] = x;\n            _floatView[j++] = y;\n            _floatView[j++] = x2;\n            _floatView[j++] = y2;\n            _floatView[j++] = x2;\n            _floatView[j++] = bottomLine;\n            _floatView[j++] = x;\n            _floatView[j++] = y;\n            _floatView[j++] = x2;\n            _floatView[j++] = bottomLine;\n            _floatView[j++] = x;\n            _floatView[j++] = bottomLine;\n        }\n        this._buffer.update();\n\n        this.lastPointNum = this.lastLen;\n        this.lastPointData = this.lastLen; // TODO: partial upload\n    }\n}\n\nexport class PlotGradient extends Mesh {\n    constructor() {\n        super(new PlotGradientGeometry(), new PlotGradientShader());\n    }\n\n    get coordTop(): number {\n        return this.shader.uniforms.rangeY[0];\n    }\n\n    set coordTop(value: number) {\n        this.shader.uniforms.rangeY[0] = value;\n    }\n\n    get coordBottom(): number {\n        return this.shader.uniforms.rangeY[1];\n    }\n\n    set coordBottom(value: number) {\n        this.shader.uniforms.rangeY[1] = value;\n    }\n\n    get alphaTop(): number {\n        return this.shader.uniforms.colorTop[3];\n    }\n\n    set alphaTop(value: number) {\n        this.shader.uniforms.colorTop[3] = value;\n    }\n\n    get alphaBottom(): number {\n        return this.shader.uniforms.colorBottom[3];\n    }\n\n    set alphaBottom(value: number) {\n        this.shader.uniforms.colorBottom[3] = value;\n    }\n\n    get colorBottom(): number {\n        return rgb2hex(this.shader.uniforms.colorBottom);\n    }\n\n    set colorBottom(value: number) {\n        hex2rgb(value, this.shader.uniforms.colorBottom);\n    }\n\n    get colorTop(): number {\n        return rgb2hex(this.shader.uniforms.colorTop);\n    }\n\n    set colorTop(value: number) {\n        hex2rgb(value, this.shader.uniforms.colorTop);\n    }\n\n    masterPlot: Plot = null;\n    plotUpdateId = -1;\n\n    clear() {\n        if (!this.masterPlot) {\n            (this.geometry as PlotGradientGeometry).reset();\n        }\n    }\n\n    moveTo(x: number, y: number) {\n        this.lineTo(x, y);\n    }\n\n    lineTo(x: number, y: number) {\n        if (!this.masterPlot) {\n            (this.geometry as PlotGradientGeometry).lineTo(x, y);\n        }\n    }\n\n    _render(renderer: Renderer): void {\n        const geom = this.geometry as PlotGradientGeometry;\n        if (this.masterPlot) {\n            const plotGeom = this.masterPlot.geometry as PlotGeometry;\n            if (this.plotUpdateId !== plotGeom.updateId) {\n                this.plotUpdateId = plotGeom.updateId;\n                geom.points = plotGeom.points;\n                geom.invalidate();\n            }\n        }\n        geom.updateBuffer();\n\n        this._renderDefault(renderer);\n    }\n\n    _renderCanvas(renderer: CanvasRenderer): void {\n        const geom = this.geometry as PlotGradientGeometry;\n        // let points = geom.points;\n        // if (this.masterPlot) {\n        //     const plotGeom = this.masterPlot.geometry as PlotGeometry;\n        //     if (this.plotUpdateId !== plotGeom.updateId) {\n        //         this.plotUpdateId = plotGeom.updateId\n        //         geom.points = plotGeom.points;\n        //     }\n        // }\n        //\n        //\n        // const {points, stridePoints} = this.geometry as BarsGeometry;\n        // const {context} = renderer;\n        // const len = points.length;\n        // if (len < 2) {\n        //     return;\n        // }\n        // const wt = this.transform.worldTransform;\n        // renderer.setContextTransform(wt);\n        //\n        // const scale = Math.sqrt(wt.a * wt.a + wt.b * wt.b);\n        // context.lineWidth = this.shader.uniforms.lineWidth[0] + this.shader.uniforms.lineWidth[1] / scale;\n        //\n        // context.strokeStyle = utils.hex2string(this.tint);\n        // context.globalAlpha = this.worldAlpha;\n        //\n        // context.beginPath();\n        // context.moveTo(points[0], points[1]);\n        // for (let i = 2; i < points.length; i += stridePoints) {\n        //     context.lineTo(points[i], points[i + 1]);\n        // }\n        // context.stroke();\n        // context.beginPath();\n        //\n        // context.globalAlpha = 1.0;\n    }\n}\n"]}