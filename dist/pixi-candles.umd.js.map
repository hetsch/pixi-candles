{"version":3,"file":"pixi-candles.umd.js","sources":["../src/Bars.ts","../src/Plot.ts","../src/PlotGradient.ts"],"sourcesContent":["import {Buffer, Geometry, Program, Texture, Renderer} from '@pixi/core';\nimport {CanvasRenderer} from '@pixi/canvas-renderer';\nimport {Mesh, MeshMaterial} from '@pixi/mesh';\nimport {createIndicesForQuads, hex2string} from '@pixi/utils';\nimport {TYPES} from '@pixi/constants';\n\nconst barVert = `\nattribute vec4 aRect;\nattribute vec2 aQuad;\nattribute vec4 aColor;\nuniform mat3 projectionMatrix;\nuniform mat3 translationMatrix;\nuniform float resolution;\nuniform vec4 uColor;\nuniform float threshold;\n\nvarying vec2 vPos;\nvarying vec4 vDistance;\nvarying vec4 vColor;\n\nvoid main(void){\nvec2 p1 = (translationMatrix * vec3(aRect.xy, 1.0)).xy;\nvec2 p2 = (translationMatrix * vec3(aRect.xy + aRect.zw, 1.0)).xy;\nvec2 size = p2 - p1;\n\nvec2 tQuad = (aQuad * 2.0 - 1.0) * threshold;\nvec2 tWorld = tQuad;\nif (size.x < 0.0) {\n    tWorld.x = -tWorld.x;\n}\nif (size.y < 0.0) {\n    tWorld.y = -tWorld.y;\n}\n\nvec2 localPos = (translationMatrix * vec3(aRect.zw * aQuad, 0.0)).xy;\nvec2 cssPos = (p1 + localPos) + tWorld / resolution;\nvDistance.xy = abs(localPos) * resolution + tQuad;\nvDistance.zw = aRect.zw * resolution;\ngl_Position = vec4((projectionMatrix * vec3(cssPos, 1.0)).xy, 0.0, 1.0);\nvColor = aColor * uColor;\n}`;\nconst barFrag = `\nvarying vec2 vPos;\nvarying vec4 vDistance;\nvarying vec4 vColor;\n\nvoid main(void) {\nvec2 leftTop = max(vDistance.xy - 0.5, 0.0);\nvec2 rightBottom = min(vDistance.xy + 0.5, vDistance.zw);\nvec2 area = max(rightBottom - leftTop, 0.0);\nfloat clip = area.x * area.y;\n\ngl_FragColor = vColor * clip;\n}`;\n\nexport class BarsShader extends MeshMaterial {\n    static _prog: Program = null;\n\n    static getProgram(): Program {\n        if (!BarsShader._prog) {\n            BarsShader._prog = new Program(barVert, barFrag);\n        }\n        return BarsShader._prog;\n    }\n\n    constructor() {\n        super(Texture.WHITE, {\n            uniforms: {\n                resolution: 1,\n                threshold: 1,\n            },\n            program: BarsShader.getProgram()\n        });\n    }\n}\n\nexport class BarsGeometry extends Geometry {\n    constructor(_static = false) {\n        super();\n        this.initGeom(_static);\n        this.reset();\n    }\n\n    lastLen = 0;\n    lastPointNum = 0;\n    lastPointData = 0;\n    points: Array<number> = [];\n    _floatView: Float32Array = null;\n    _u32View: Uint32Array = null;\n    _buffer: Buffer = null;\n    _quad: Buffer = null;\n    _indexBuffer: Buffer = null;\n\n    initGeom(_static: boolean) {\n        this._buffer = new Buffer(new Float32Array(0), _static, false);\n\n        this._quad = new Buffer(new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]), true, false);\n\n        this._indexBuffer = new Buffer(new Uint16Array([0, 1, 2, 0, 2, 3]), true, true);\n\n        this.addAttribute('aRect', this._buffer, 4, false, TYPES.FLOAT, undefined, undefined, true)\n            .addAttribute('aColor', this._buffer, 4, true, TYPES.UNSIGNED_BYTE, undefined, undefined, true)\n            .addAttribute('aQuad', this._quad, 2, false, TYPES.FLOAT)\n            .addIndex(this._indexBuffer);\n    }\n\n    stridePoints = 5;\n    strideFloats = 5;\n    strideBytes = 20;\n\n    addRect(x: number, y: number, w: number, h: number, color: number) {\n        const {points} = this;\n        points.push(x);\n        points.push(y);\n        points.push(w);\n        points.push(h);\n        points.push(color);\n    }\n\n    invalidate(pointNum = 0) {\n        this.lastPointNum = Math.min(pointNum, this.lastPointNum);\n    }\n\n    reset() {\n        if (this.lastLen > 0) {\n            this.clearBufferData();\n        }\n        this.lastLen = 0;\n        this.lastPointData = 0;\n        this.points.length = 0;\n        this.instanceCount = 0;\n    }\n\n    clearBufferData() {\n        const {points, strideBytes, stridePoints} = this;\n        this.lastPointNum = 0;\n        this.lastPointData = 0;\n        const arrBuf = new ArrayBuffer(strideBytes * points.length / stridePoints);\n        this.lastLen = points.length;\n        this._floatView = new Float32Array(arrBuf);\n        this._u32View = new Uint32Array(arrBuf);\n        this._buffer.update(arrBuf);\n    }\n\n    updateBuffer() {\n        const {points, stridePoints, strideFloats} = this;\n\n        if (this.lastLen > points.length) {\n            this.lastLen = -1;\n        }\n        if (this.lastLen < points.length\n            || this.lastPointNum < this.lastLen) { // TODO: partial upload\n            this.clearBufferData();\n        }\n\n        if (this.lastPointNum == this.lastLen) {\n            return;\n        }\n\n        const {_floatView, _u32View} = this;\n        this.lastPointData = Math.min(this.lastPointData, this.lastPointNum);\n        let j = Math.round(this.lastPointNum * strideFloats / stridePoints); //actually that's int division\n        for (let i = this.lastPointNum; i < points.length; i += stridePoints) {\n            _floatView[j++] = points[i];\n            _floatView[j++] = points[i + 1];\n            _floatView[j++] = points[i + 2];\n            _floatView[j++] = points[i + 3];\n\n            const rgb = points[i + 4];\n            const bgra = ((rgb >> 16) & 0xff) | (rgb & 0xff00) | ((rgb & 0xff) << 16) | (255 << 24);\n            _u32View[j++] = bgra;\n        }\n        this._buffer.update();\n        this.instanceCount = Math.round(points.length / stridePoints);\n\n        this.lastPointNum = this.lastLen;\n        this.lastPointData = this.lastLen; // TODO: partial upload\n\n        if (this.legacyGeom) {\n            this.updateLegacy();\n        }\n    }\n\n    legacyGeom: Geometry = null;\n    legacyBuffer: Buffer = null;\n\n    initLegacy() {\n        if (this.legacyGeom) {\n            return;\n        }\n        this.legacyGeom = new Geometry();\n        this.legacyBuffer = new Buffer(new Float32Array(0), false, false);\n        this.legacyGeom.addAttribute('aRect', this.legacyBuffer, 4, false, TYPES.FLOAT)\n            .addAttribute('aColor', this.legacyBuffer, 4, true, TYPES.UNSIGNED_BYTE)\n            .addAttribute('aQuad', this.legacyBuffer, 2, false, TYPES.FLOAT)\n            .addIndex(new Buffer(new Uint16Array([0, 1, 2, 0, 2, 3]), false, true));\n    }\n\n    updateLegacy() {\n        const {legacyBuffer, _floatView, _u32View, strideFloats} = this;\n        const strideLegacy = 7;\n        const quadsCount = this._floatView.length / strideFloats;\n        const legacyLen = quadsCount * strideLegacy * 4;\n        if ((legacyBuffer.data as Float32Array).length !== legacyLen) {\n            legacyBuffer.data = new Float32Array(legacyLen);\n            this.legacyGeom.getIndex().update(createIndicesForQuads(quadsCount));\n        }\n        const floats: Float32Array = legacyBuffer.data as any;\n        const quad: Float32Array = this._quad.data as any;\n\n        for (let i = 0, j = 0; i < this._floatView.length;) {\n            for (let k = 0; k < 4; k++) {\n                floats[j++] = _floatView[i];\n                floats[j++] = _floatView[i + 1];\n                floats[j++] = _floatView[i + 2];\n                floats[j++] = _floatView[i + 3];\n                floats[j++] = _floatView[i + 4];\n                floats[j++] = quad[k * 2]\n                floats[j++] = quad[k * 2 + 1];\n            }\n            i += strideFloats;\n        }\n        legacyBuffer.update();\n    }\n}\n\nexport class Bars extends Mesh {\n    constructor() {\n        super(new BarsGeometry(), new BarsShader());\n    }\n\n    addRect(x: number, y: number, w: number, h: number, color: number) {\n        const geometry = this.geometry as BarsGeometry;\n        geometry.addRect(x, y, w, h, color);\n    }\n\n    clear() {\n        (this.geometry as BarsGeometry).reset();\n    }\n\n    _renderDefault(renderer: Renderer): void {\n        const geometry = this.geometry as BarsGeometry;\n\n        const useLegacy = !renderer.geometry.hasInstance;\n        if (useLegacy) {\n            geometry.initLegacy();\n        }\n        geometry.updateBuffer();\n        if (geometry.instanceCount === 0) {\n            return;\n        }\n        const rt = renderer.renderTexture.current;\n        this.shader.uniforms.resolution = rt ? rt.baseTexture.resolution : renderer.resolution;\n\n        const multisample = rt ? rt.framebuffer.multisample > 1 : renderer.options.antialias;\n        this.shader.uniforms.threshold = multisample ? 2 : 1;\n\n        if (useLegacy) {\n            // hacky!\n            (this as any).geometry = geometry.legacyGeom;\n            super._renderDefault(renderer);\n            (this as any).geometry = geometry;\n            return;\n        }\n        super._renderDefault(renderer);\n    }\n\n    _renderCanvas(renderer: CanvasRenderer): void {\n        const {points} = this.geometry as BarsGeometry;\n        const {context} = renderer;\n\n        renderer.setContextTransform(this.transform.worldTransform);\n\n        context.beginPath();\n        let clr = -1;\n        for (let i = 0; i < points.length; i += 5) {\n            if (clr !== points[i + 4]) {\n                clr = points[i + 4];\n                let fill = hex2string(clr);\n                context.fillStyle = fill;\n            }\n            context.beginPath();\n            context.rect(points[i], points[i + 1], points[i + 2], points[i + 3]);\n            context.fill();\n        }\n        context.beginPath();\n    }\n}\n","import {Buffer, Geometry, Program, Texture, Renderer} from '@pixi/core';\nimport {CanvasRenderer} from '@pixi/canvas-renderer';\nimport {Mesh, MeshMaterial} from '@pixi/mesh';\nimport {createIndicesForQuads, hex2string} from '@pixi/utils';\nimport {LINE_JOIN, LINE_CAP} from '@pixi/graphics';\nimport {TYPES} from '@pixi/constants';\n\nexport enum JOINT_TYPE {\n    NONE = 0,\n    FILL = 1,\n    JOINT_BEVEL = 4,\n    JOINT_MITER = 8,\n    JOINT_ROUND = 12,\n    JOINT_CAP_BUTT = 16,\n    JOINT_CAP_SQUARE = 18,\n    JOINT_CAP_ROUND = 20,\n    FILL_EXPAND = 24,\n    CAP_BUTT = 1 << 5,\n    CAP_SQUARE = 2 << 5,\n    CAP_ROUND = 3 << 5,\n    CAP_BUTT2 = 4 << 5,\n}\n\nexport enum LINE_SCALE_MODE {\n    NONE = 'none',\n    NORMAL = 'normal',\n    HORIZONTAL = 'horizontal',\n    VERTICAL = 'vertical',\n}\n\nconst plotVert = `precision highp float;\nconst float FILL = 1.0;\nconst float BEVEL = 4.0;\nconst float MITER = 8.0;\nconst float ROUND = 12.0;\nconst float JOINT_CAP_BUTT = 16.0;\nconst float JOINT_CAP_SQUARE = 18.0;\nconst float JOINT_CAP_ROUND = 20.0;\n\nconst float FILL_EXPAND = 24.0;\n\nconst float CAP_BUTT = 1.0;\nconst float CAP_SQUARE = 2.0;\nconst float CAP_ROUND = 3.0;\nconst float CAP_BUTT2 = 4.0;\n\n// === geom ===\nattribute vec2 aPrev;\nattribute vec2 aPoint1;\nattribute vec2 aPoint2;\nattribute vec2 aNext;\nattribute float aVertexJoint;\nattribute float vertexNum;\n\nuniform mat3 projectionMatrix;\nuniform mat3 translationMatrix;\n\nvarying vec4 vDistance;\nvarying vec4 vArc;\nvarying float vType;\n\nuniform float resolution;\nuniform float expand;\nuniform float miterLimit;\nuniform float scaleMode;\nuniform vec2 styleLine;\n\nvec2 doBisect(vec2 norm, float len, vec2 norm2, float len2,\n    float dy, float inner) {\n    vec2 bisect = (norm + norm2) / 2.0;\n    bisect /= dot(norm, bisect);\n    vec2 shift = dy * bisect;\n    if (inner > 0.5) {\n        if (len < len2) {\n            if (abs(dy * (bisect.x * norm.y - bisect.y * norm.x)) > len) {\n                return dy * norm;\n            }\n        } else {\n            if (abs(dy * (bisect.x * norm2.y - bisect.y * norm2.x)) > len2) {\n                return dy * norm;\n            }\n        }\n    }\n    return dy * bisect;\n}\n\nvoid main(void){\n    vec2 pointA = (translationMatrix * vec3(aPoint1, 1.0)).xy;\n    vec2 pointB = (translationMatrix * vec3(aPoint2, 1.0)).xy;\n\n    vec2 xBasis = pointB - pointA;\n    float len = length(xBasis);\n    vec2 forward = xBasis / len;\n    vec2 norm = vec2(forward.y, -forward.x);\n\n    float type = aVertexJoint;\n\n    float lineWidth = styleLine.x;\n    if (scaleMode > 2.5) {\n        lineWidth *= length(translationMatrix * vec3(1.0, 0.0, 0.0));\n    } else if (scaleMode > 1.5) {\n        lineWidth *= length(translationMatrix * vec3(0.0, 1.0, 0.0));\n    } else if (scaleMode > 0.5) {\n        vec2 avgDiag = (translationMatrix * vec3(1.0, 1.0, 0.0)).xy;\n        lineWidth *= sqrt(dot(avgDiag, avgDiag) * 0.5);\n    }\n    float capType = floor(type / 32.0);\n    type -= capType * 32.0;\n    vArc = vec4(0.0);\n    lineWidth *= 0.5;\n    float lineAlignment = 2.0 * styleLine.y - 1.0;\n\n    vec2 pos;\n\n    if (capType == CAP_ROUND) {\n        if (vertexNum < 3.5) {\n            gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\n            return;\n        }\n        type = JOINT_CAP_ROUND;\n        capType = 0.0;\n    }\n\n    if (type >= BEVEL) {\n        float dy = lineWidth + expand;\n        float inner = 0.0;\n        if (vertexNum >= 1.5) {\n            dy = -dy;\n            inner = 1.0;\n        }\n\n        vec2 base, next, xBasis2, bisect;\n        float flag = 0.0;\n        float sign2 = 1.0;\n        if (vertexNum < 0.5 || vertexNum > 2.5 && vertexNum < 3.5) {\n            next = (translationMatrix * vec3(aPrev, 1.0)).xy;\n            base = pointA;\n            flag = type - floor(type / 2.0) * 2.0;\n            sign2 = -1.0;\n        } else {\n            next = (translationMatrix * vec3(aNext, 1.0)).xy;\n            base = pointB;\n            if (type >= MITER && type < MITER + 3.5) {\n                flag = step(MITER + 1.5, type);\n                // check miter limit here?\n            }\n        }\n        xBasis2 = next - base;\n        float len2 = length(xBasis2);\n        vec2 norm2 = vec2(xBasis2.y, -xBasis2.x) / len2;\n        float D = norm.x * norm2.y - norm.y * norm2.x;\n        if (D < 0.0) {\n            inner = 1.0 - inner;\n        }\n\n        norm2 *= sign2;\n\n        if (abs(lineAlignment) > 0.01) {\n            float shift = lineWidth * lineAlignment;\n            pointA += norm * shift;\n            pointB += norm * shift;\n            if (abs(D) < 0.01) {\n                base += norm * shift;\n            } else {\n                base += doBisect(norm, len, norm2, len2, shift, 0.0);\n            }\n        }\n\n        float collinear = step(0.0, dot(norm, norm2));\n\n        vType = 0.0;\n        float dy2 = -1000.0;\n        float dy3 = -1000.0;\n\n        if (abs(D) < 0.01 && collinear < 0.5) {\n            if (type >= ROUND && type < ROUND + 1.5) {\n                type = JOINT_CAP_ROUND;\n            }\n            //TODO: BUTT here too\n        }\n\n        if (vertexNum < 3.5) {\n            if (abs(D) < 0.01) {\n                pos = dy * norm;\n            } else {\n                if (flag < 0.5 && inner < 0.5) {\n                    pos = dy * norm;\n                } else {\n                    pos = doBisect(norm, len, norm2, len2, dy, inner);\n                }\n            }\n            if (capType >= CAP_BUTT && capType < CAP_ROUND) {\n                float extra = step(CAP_SQUARE, capType) * lineWidth;\n                vec2 back = -forward;\n                if (vertexNum < 0.5 || vertexNum > 2.5) {\n                    pos += back * (expand + extra);\n                    dy2 = expand;\n                } else {\n                    dy2 = dot(pos + base - pointA, back) - extra;\n                }\n            }\n            if (type >= JOINT_CAP_BUTT && type < JOINT_CAP_SQUARE + 0.5) {\n                float extra = step(JOINT_CAP_SQUARE, type) * lineWidth;\n                if (vertexNum < 0.5 || vertexNum > 2.5) {\n                    dy3 = dot(pos + base - pointB, forward) - extra;\n                } else {\n                    pos += forward * (expand + extra);\n                    dy3 = expand;\n                    if (capType >= CAP_BUTT) {\n                        dy2 -= expand + extra;\n                    }\n                }\n            }\n        } else if (type >= JOINT_CAP_ROUND && type < JOINT_CAP_ROUND + 1.5) {\n            if (inner > 0.5) {\n                dy = -dy;\n                inner = 0.0;\n            }\n            vec2 d2 = abs(dy) * forward;\n            if (vertexNum < 4.5) {\n                dy = -dy;\n                pos = dy * norm;\n            } else if (vertexNum < 5.5) {\n                pos = dy * norm;\n            } else if (vertexNum < 6.5) {\n                pos = dy * norm + d2;\n                vArc.x = abs(dy);\n            } else {\n                dy = -dy;\n                pos = dy * norm + d2;\n                vArc.x = abs(dy);\n            }\n            dy2 = 0.0;\n            vArc.y = dy;\n            vArc.z = 0.0;\n            vArc.w = lineWidth;\n            vType = 3.0;\n        } else if (abs(D) < 0.01) {\n            pos = dy * norm;\n        } else {\n            if (type >= ROUND && type < ROUND + 1.5) {\n                if (inner > 0.5) {\n                    dy = -dy;\n                    inner = 0.0;\n                }\n                if (vertexNum < 4.5) {\n                    pos = doBisect(norm, len, norm2, len2, -dy, 1.0);\n                } else if (vertexNum < 5.5) {\n                    pos = dy * norm;\n                } else if (vertexNum > 7.5) {\n                    pos = dy * norm2;\n                } else {\n                    pos = doBisect(norm, len, norm2, len2, dy, 0.0);\n                    float d2 = abs(dy);\n                    if (length(pos) > abs(dy) * 1.5) {\n                        if (vertexNum < 6.5) {\n                            pos.x = dy * norm.x - d2 * norm.y;\n                            pos.y = dy * norm.y + d2 * norm.x;\n                        } else {\n                            pos.x = dy * norm2.x + d2 * norm2.y;\n                            pos.y = dy * norm2.y - d2 * norm2.x;\n                        }\n                    }\n                }\n                vec2 norm3 = normalize(norm + norm2);\n\n                float sign = step(0.0, dy) * 2.0 - 1.0;\n                vArc.x = sign * dot(pos, norm3);\n                vArc.y = pos.x * norm3.y - pos.y * norm3.x;\n                vArc.z = dot(norm, norm3) * lineWidth;\n                vArc.w = lineWidth;\n\n                dy = -sign * dot(pos, norm);\n                dy2 = -sign * dot(pos, norm2);\n                dy3 = vArc.z - vArc.x;\n                vType = 3.0;\n            } else {\n                float hit = 0.0;\n                if (type >= BEVEL && type < BEVEL + 1.5) {\n                    if (dot(norm, norm2) > 0.0) {\n                        type = MITER;\n                    }\n                }\n\n                if (type >= MITER && type < MITER + 3.5) {\n                    if (inner > 0.5) {\n                        dy = -dy;\n                        inner = 0.0;\n                    }\n                    float sign = step(0.0, dy) * 2.0 - 1.0;\n                    pos = doBisect(norm, len, norm2, len2, dy, 0.0);\n                    if (length(pos) > abs(dy) * miterLimit) {\n                        type = BEVEL;\n                    } else {\n                        if (vertexNum < 4.5) {\n                            dy = -dy;\n                            pos = doBisect(norm, len, norm2, len2, dy, 1.0);\n                        } else if (vertexNum < 5.5) {\n                            pos = dy * norm;\n                        } else if (vertexNum > 6.5) {\n                            pos = dy * norm2;\n                        }\n                        vType = 1.0;\n                        dy = -sign * dot(pos, norm);\n                        dy2 = -sign * dot(pos, norm2);\n                        hit = 1.0;\n                    }\n                }\n                if (type >= BEVEL && type < BEVEL + 1.5) {\n                    if (inner > 0.5) {\n                        dy = -dy;\n                        inner = 0.0;\n                    }\n                    float d2 = abs(dy);\n                    vec2 pos3 = vec2(dy * norm.x - d2 * norm.y, dy * norm.y + d2 * norm.x);\n                    vec2 pos4 = vec2(dy * norm2.x + d2 * norm2.y, dy * norm2.y - d2 * norm2.x);\n                    if (vertexNum < 4.5) {\n                        pos = doBisect(norm, len, norm2, len2, -dy, 1.0);\n                    } else if (vertexNum < 5.5) {\n                        pos = dy * norm;\n                    } else if (vertexNum > 7.5) {\n                        pos = dy * norm2;\n                    } else {\n                        if (vertexNum < 6.5) {\n                            pos = pos3;\n                        } else {\n                            pos = pos4;\n                        }\n                    }\n                    vec2 norm3 = normalize(norm + norm2);\n                    float sign = step(0.0, dy) * 2.0 - 1.0;\n\n                    dy = -sign * dot(pos, norm);\n                    dy2 = -sign * dot(pos, norm2);\n                    dy3 = (-sign * dot(pos, norm3)) + lineWidth;\n                    vType = 4.0;\n                    hit = 1.0;\n                }\n                if (hit < 0.5) {\n                    gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\n                    return;\n                }\n            }\n        }\n\n        pos += base;\n        vDistance = vec4(dy, dy2, dy3, lineWidth) * resolution;\n        vArc = vArc * resolution;\n    }\n\n    gl_Position = vec4((projectionMatrix * vec3(pos, 1.0)).xy, 0.0, 1.0);\n}`;\n\nconst plotFrag = `precision highp float;\nvarying vec4 vDistance;\nvarying vec4 vArc;\nvarying float vType;\nuniform vec4 uColor;\n\nvoid main(void){\n    float alpha = 1.0;\n    float lineWidth = vDistance.w;\n    if (vType < 0.5) {\n        float left = max(vDistance.x - 0.5, -vDistance.w);\n        float right = min(vDistance.x + 0.5, vDistance.w);\n        float near = vDistance.y - 0.5;\n        float far = min(vDistance.y + 0.5, 0.0);\n        float top = vDistance.z - 0.5;\n        float bottom = min(vDistance.z + 0.5, 0.0);\n        alpha = max(right - left, 0.0) * max(bottom - top, 0.0) * max(far - near, 0.0);\n    } else if (vType < 1.5) {\n        float a1 = clamp(vDistance.x + 0.5 - lineWidth, 0.0, 1.0);\n        float a2 = clamp(vDistance.x + 0.5 + lineWidth, 0.0, 1.0);\n        float b1 = clamp(vDistance.y + 0.5 - lineWidth, 0.0, 1.0);\n        float b2 = clamp(vDistance.y + 0.5 + lineWidth, 0.0, 1.0);\n        alpha = a2 * b2 - a1 * b1;\n    } else if (vType < 2.5) {\n        alpha *= max(min(vDistance.x + 0.5, 1.0), 0.0);\n        alpha *= max(min(vDistance.y + 0.5, 1.0), 0.0);\n        alpha *= max(min(vDistance.z + 0.5, 1.0), 0.0);\n    } else if (vType < 3.5) {\n        float a1 = clamp(vDistance.x + 0.5 - lineWidth, 0.0, 1.0);\n        float a2 = clamp(vDistance.x + 0.5 + lineWidth, 0.0, 1.0);\n        float b1 = clamp(vDistance.y + 0.5 - lineWidth, 0.0, 1.0);\n        float b2 = clamp(vDistance.y + 0.5 + lineWidth, 0.0, 1.0);\n        float alpha_miter = a2 * b2 - a1 * b1;\n\n        float alpha_plane = max(min(vDistance.z + 0.5, 1.0), 0.0);\n\n        float d = length(vArc.xy);\n        float circle_hor = max(min(vArc.w, d + 0.5) - max(-vArc.w, d - 0.5), 0.0);\n        float circle_vert = min(vArc.w * 2.0, 1.0);\n        float alpha_circle = circle_hor * circle_vert;\n\n        alpha = min(alpha_miter, max(alpha_circle, alpha_plane));\n    } else {\n        float a1 = clamp(vDistance.x + 0.5 - lineWidth, 0.0, 1.0);\n        float a2 = clamp(vDistance.x + 0.5 + lineWidth, 0.0, 1.0);\n        float b1 = clamp(vDistance.y + 0.5 - lineWidth, 0.0, 1.0);\n        float b2 = clamp(vDistance.y + 0.5 + lineWidth, 0.0, 1.0);\n        alpha = a2 * b2 - a1 * b1;\n        alpha *= max(min(vDistance.z + 0.5, 1.0), 0.0);\n    }\n    gl_FragColor = uColor * alpha;\n}\n`;\n\nexport class PlotShader extends MeshMaterial {\n    static _prog: Program = null;\n\n    static getProgram(): Program {\n        if (!PlotShader._prog) {\n            PlotShader._prog = new Program(plotVert, plotFrag);\n        }\n        return PlotShader._prog;\n    }\n\n    constructor() {\n        super(Texture.WHITE, {\n            uniforms: {\n                resolution: 1,\n                expand: 1,\n                scaleMode: 1,\n                styleLine: new Float32Array([1.0, 0.5]),\n                miterLimit: 5.0,\n            },\n            program: PlotShader.getProgram()\n        });\n    }\n}\n\nexport function multIndex(indices: Uint32Array, vertCount: number, instanceCount: number, support32 = true) {\n    const size = indices.length;\n    const ind = support32 ? new Uint32Array(size * instanceCount) : new Uint16Array(size * instanceCount);\n    for (let i = 0; i < instanceCount; i++) {\n        for (let j = 0; j < size; j++) {\n            ind[i * size + j] = indices[j] + vertCount * i;\n        }\n    }\n    return ind;\n}\n\nexport class PlotGeometry extends Geometry {\n    constructor(_static = false) {\n        super();\n        this.initGeom(_static);\n        this.reset();\n    }\n\n    joinStyle = LINE_JOIN.MITER;\n    capStyle = LINE_CAP.SQUARE;\n\n    lastLen = 0;\n    lastPointNum = 0;\n    lastPointData = 0;\n    updateId = 0;\n    points: Array<number> = [];\n    _floatView: Float32Array = null;\n    _u32View: Uint32Array = null;\n    _buffer: Buffer = null;\n    _quad: Buffer = null;\n    _indexBuffer: Buffer = null;\n    _vertexNums: Buffer = null;\n    support32 = false;\n\n    initGeom(_static: boolean) {\n        this._buffer = new Buffer(new Float32Array(0), _static, false);\n\n        this._vertexNums = new Buffer(new Float32Array([0, 1, 2, 3, 4, 5, 6, 7, 8]), true, false);\n\n        this._indexBuffer = new Buffer(new Uint16Array([0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 4, 7, 8]), true, true);\n\n        this.addAttribute('aPrev', this._buffer, 2, false, TYPES.FLOAT, 3 * 4, 0 * 4, true)\n            .addAttribute('aPoint1', this._buffer, 2, false, TYPES.FLOAT, 3 * 4, 3 * 4, true)\n            .addAttribute('aPoint2', this._buffer, 2, false, TYPES.FLOAT, 3 * 4, 6 * 4, true)\n            .addAttribute('aNext', this._buffer, 2, false, TYPES.FLOAT, 3 * 4, 9 * 4, true)\n            .addAttribute('aVertexJoint', this._buffer, 1, false, TYPES.FLOAT, 3 * 4, 5 * 4, true)\n            .addAttribute('vertexNum', this._vertexNums, 1, false, TYPES.FLOAT)\n            .addIndex(this._indexBuffer);\n    }\n\n    stridePoints = 2;\n    strideFloats = 3;\n    strideBytes = 3 * 4;\n\n    moveTo(x: number, y: number) {\n        const {points} = this;\n        points.push(x);\n        points.push(y);\n    }\n\n    lineTo(x: number, y: number) {\n        const {points} = this;\n        points.push(x);\n        points.push(y);\n    }\n\n\n    lineBy(dx: number, dy: number) {\n        const {points, stridePoints} = this;\n\n        const x = points[points.length - stridePoints];\n        const y = points[points.length - stridePoints + 1];\n\n        points.push(x + dx);\n        points.push(y + dy);\n    }\n\n    invalidate(pointNum = 0) {\n        this.lastPointNum = Math.min(pointNum, this.lastPointNum);\n        this.updateId++;\n    }\n\n    reset() {\n        if (this.lastLen > 0) {\n            this.clearBufferData();\n        }\n        this.updateId++;\n        this.lastLen = 0;\n        this.lastPointData = 0;\n        this.points.length = 0;\n        this.instanceCount = 0;\n    }\n\n    clearBufferData() {\n        const {points, strideBytes, stridePoints} = this;\n        this.lastPointNum = 0;\n        this.lastPointData = 0;\n        const arrayLen = Math.max(0, points.length / stridePoints + 3);\n        const arrBuf = new ArrayBuffer(strideBytes * arrayLen);\n        this.lastLen = points.length;\n        this._floatView = new Float32Array(arrBuf);\n        this._u32View = new Uint32Array(arrBuf);\n        this._buffer.update(arrBuf);\n    }\n\n    updateBuffer() {\n        const {points, stridePoints, strideFloats} = this;\n\n        if (this.lastLen > points.length) {\n            this.lastLen = -1;\n        }\n        if (this.lastLen < points.length\n            || this.lastPointNum < this.lastLen) { // TODO: partial upload\n            this.clearBufferData();\n        }\n\n        if (this.lastPointNum == this.lastLen) {\n            return;\n        }\n\n        const jointType = this.jointType();\n        const capType = this.capType();\n        let endJoint = capType;\n        if (capType === JOINT_TYPE.CAP_ROUND) {\n            endJoint = JOINT_TYPE.JOINT_CAP_ROUND;\n        }\n        if (capType === JOINT_TYPE.CAP_BUTT) {\n            endJoint = JOINT_TYPE.JOINT_CAP_BUTT;\n        }\n        if (capType === JOINT_TYPE.CAP_SQUARE) {\n            endJoint = JOINT_TYPE.JOINT_CAP_SQUARE;\n        }\n\n        const {_floatView, _u32View} = this;\n\n        if (this.lastPointNum > 0) {\n            this.lastPointNum--;\n        }\n        if (this.lastPointNum > 0) {\n            this.lastPointNum--;\n        }\n\n        this.lastPointData = Math.min(this.lastPointData, this.lastPointNum);\n        let j = (Math.round(this.lastPointNum / stridePoints) + 2) * strideFloats; //actually that's int division\n\n        // TODO: null points should have extra instance? more than instance on one point?\n\n        for (let i = this.lastPointNum; i < points.length; i += stridePoints) {\n            _floatView[j++] = points[i];\n            _floatView[j++] = points[i + 1];\n\n            if (isNaN(points[i]) || isNaN(points[i + 1])) {\n                // find prev non-nan\n                _floatView[j-2] = (points[i+2] + points[i-2]) * 0.5;\n                _floatView[j-1] = (points[i+3] + points[i-1]) * 0.5;\n                _floatView[j] = 0;\n                j++;\n                continue;\n            }\n\n            _floatView[j] = jointType;\n            if (i == 0) {\n                if (capType !== JOINT_TYPE.CAP_ROUND) {\n                    _floatView[j] += capType;\n                }\n            } else {\n                if (isNaN(points[i - 2]) || isNaN(points[i - 1])) {\n                    _floatView[j] += JOINT_TYPE.CAP_BUTT;\n                }\n            }\n            if (i + stridePoints * 2 >= points.length || isNaN(points[i + 4]) || isNaN(points[i + 5])) {\n                _floatView[j] += endJoint - jointType;\n            } else if (i + stridePoints >= points.length || isNaN(points[i + 2]) || isNaN(points[i + 3])) {\n                _floatView[j] = 0;\n            }\n            j++;\n        }\n        _floatView[j++] = points[points.length - 4];\n        _floatView[j++] = points[points.length - 3];\n        _floatView[j++] = 0;\n        _floatView[0] = points[0];\n        _floatView[1] = points[1];\n        _floatView[2] = 0;\n        _floatView[3] = points[2];\n        _floatView[4] = points[3];\n        _floatView[5] = capType === JOINT_TYPE.CAP_ROUND ? capType : 0;\n\n        //TODO: update from first modified float\n        this._buffer.update();\n        this.instanceCount = Math.round(points.length / stridePoints);\n\n        this.lastPointNum = this.lastLen;\n        this.lastPointData = this.lastLen; // TODO: partial upload\n\n        if (this.legacyGeom) {\n            this.updateLegacy();\n        }\n    }\n\n    legacyGeom: Geometry = null;\n    legacyBuffer: Buffer = null;\n\n    initLegacy(support32: boolean) {\n        if (this.legacyGeom) {\n            return;\n        }\n        const ind = [0, 1, 2, 0, 2, 3];\n        this.support32 = support32;\n        this.legacyGeom = new Geometry();\n        this.legacyBuffer = new Buffer(new Float32Array(0), false, false);\n        this.legacyGeom.addAttribute('aPrev', this.legacyBuffer, 2, false, TYPES.FLOAT)\n            .addAttribute('aPoint1', this.legacyBuffer, 2, false, TYPES.FLOAT)\n            .addAttribute('aPoint2', this.legacyBuffer, 2, false, TYPES.FLOAT)\n            .addAttribute('aNext', this.legacyBuffer, 2, false, TYPES.FLOAT)\n            .addAttribute('aVertexJoint', this.legacyBuffer, 1, false, TYPES.FLOAT)\n            .addAttribute('vertexNum', this.legacyBuffer, 1, false, TYPES.FLOAT)\n            .addIndex(new Buffer(support32? new Uint32Array(ind): new Uint16Array(ind), false, true));\n    }\n\n    updateLegacy() {\n        const {legacyBuffer, _floatView, _u32View, strideFloats} = this;\n        const strideLegacy = 10;\n        const vcount = 9;\n        const instanceCount = (this._floatView.length / strideFloats - 3);\n        const legacyLen = instanceCount * strideLegacy * vcount;\n        if ((legacyBuffer.data as Float32Array).length !== legacyLen) {\n            legacyBuffer.data = new Float32Array(legacyLen);\n            this.legacyGeom.getIndex().update(multIndex(this._indexBuffer.data as any, vcount, instanceCount, this.support32));\n        }\n        const floats: Float32Array = legacyBuffer.data as any;\n        for (let i = 0, j = 0; j < legacyLen; i += strideFloats) {\n            for (let k = 0; k < vcount; k++) {\n                floats[j++] = _floatView[i];\n                floats[j++] = _floatView[i + 1];\n                floats[j++] = _floatView[i + 3];\n                floats[j++] = _floatView[i + 4];\n                floats[j++] = _floatView[i + 6];\n                floats[j++] = _floatView[i + 7];\n                floats[j++] = _floatView[i + 9];\n                floats[j++] = _floatView[i + 10];\n                floats[j++] = _floatView[i + 5];\n                floats[j++] = k;\n            }\n        }\n    }\n\n    /**\n     * copied from graphics-smooth\n     */\n    public capType() {\n        let cap: number;\n\n        switch (this.capStyle) {\n            case LINE_CAP.SQUARE:\n                cap = JOINT_TYPE.CAP_SQUARE;\n                break;\n            case LINE_CAP.ROUND:\n                cap = JOINT_TYPE.CAP_ROUND;\n                break;\n            default:\n                cap = JOINT_TYPE.CAP_BUTT;\n                break;\n        }\n\n        return cap;\n    }\n\n    /**\n     * copied from graphics-smooth\n     */\n    public goodJointType() {\n        let joint: number;\n\n        switch (this.joinStyle) {\n            case LINE_JOIN.BEVEL:\n                joint = JOINT_TYPE.JOINT_BEVEL;\n                break;\n            case LINE_JOIN.ROUND:\n                joint = JOINT_TYPE.JOINT_ROUND;\n                break;\n            default:\n                joint = JOINT_TYPE.JOINT_MITER + 3;\n                break;\n        }\n\n        return joint;\n    }\n\n    /**\n     * copied from graphics-smooth\n     */\n    public jointType() {\n        let joint: number;\n\n        switch (this.joinStyle) {\n            case LINE_JOIN.BEVEL:\n                joint = JOINT_TYPE.JOINT_BEVEL;\n                break;\n            case LINE_JOIN.ROUND:\n                joint = JOINT_TYPE.JOINT_ROUND;\n                break;\n            default:\n                joint = JOINT_TYPE.JOINT_MITER;\n                break;\n        }\n\n        return joint;\n    }\n}\n\nexport interface PlotOptions {\n    lineWidth?: number;\n    nativeLineWidth?: number;\n    joinStyle?: LINE_JOIN;\n    capStyle?: LINE_CAP;\n}\n\nexport interface ILineStyleOptions{\n    color?: number;\n    alpha?: number;\n    width?: number;\n    alignment?: number;\n    scaleMode?: LINE_SCALE_MODE;\n    cap?: LINE_CAP;\n    join?: LINE_JOIN;\n    miterLimit?: number;\n}\n\nexport class Plot extends Mesh {\n    constructor(options: PlotOptions) {\n        const geometry = new PlotGeometry();\n        const shader = new PlotShader();\n        let scaleMode = LINE_SCALE_MODE.NORMAL;\n        if (options) {\n            if (options.lineWidth !== undefined) {\n                shader.uniforms.styleLine[0] = options.lineWidth;\n            }\n            if (options.nativeLineWidth !== undefined) {\n                shader.uniforms.styleLine[0] = options.nativeLineWidth;\n                scaleMode = LINE_SCALE_MODE.NONE;\n            }\n            if (options.joinStyle !== undefined) {\n                geometry.joinStyle = options.joinStyle;\n            }\n            if (options.capStyle !== undefined) {\n                geometry.capStyle = options.capStyle;\n            }\n        }\n\n        super(geometry, shader);\n        this.scaleMode = scaleMode\n    }\n\n    moveTo(x: number, y: number) {\n        const geometry = this.geometry as PlotGeometry;\n        geometry.moveTo(x, y);\n    }\n\n    lineTo(x: number, y: number) {\n        const geometry = this.geometry as PlotGeometry;\n        geometry.lineTo(x, y);\n    }\n\n    lineBy(x: number, y: number) {\n        const geometry = this.geometry as PlotGeometry;\n        geometry.lineBy(x, y);\n    }\n\n    lineStyle(width?: number, nativeWidth?: number, joinStyle?: LINE_JOIN, capStyle?: LINE_CAP) {\n        const param = width as any;\n        if (param instanceof Object) {\n            this.gLineStyle(param);\n            return;\n        }\n\n        const geometry = this.geometry as PlotGeometry;\n        if (width !== undefined) {\n            this.shader.uniforms.styleLine[0] = width;\n            this.scaleMode = LINE_SCALE_MODE.NORMAL\n        }\n        if (nativeWidth !== undefined) {\n            this.shader.uniforms.styleLine[0] = nativeWidth;\n            this.scaleMode = LINE_SCALE_MODE.NONE\n        }\n        if (joinStyle !== undefined) {\n            geometry.joinStyle = joinStyle;\n        }\n        if (capStyle !== undefined) {\n            geometry.capStyle = capStyle;\n        }\n        geometry.invalidate();\n    }\n\n    gLineStyle(obj: ILineStyleOptions) {\n        const geometry = this.geometry as PlotGeometry;\n        if (obj.width !== undefined) {\n            this.shader.uniforms.styleLine[0] = obj.width;\n        }\n        if (obj.alignment !== undefined) {\n            this.shader.uniforms.styleLine[0] = obj.alignment;\n        }\n        if (obj.scaleMode !== undefined) {\n            this.shader.uniforms.scaleMode = obj.scaleMode;\n        }\n        if (obj.color !== undefined) {\n            this.tint = obj.color;\n        }\n        if (obj.join !== undefined) {\n            geometry.joinStyle = obj.join;\n        }\n        if (obj.cap !== undefined) {\n            geometry.capStyle = obj.cap;\n        }\n    }\n\n    set scaleMode(value: LINE_SCALE_MODE) {\n        this._scaleMode = value\n        let intVal = 0;\n        switch (value) {\n            case LINE_SCALE_MODE.NORMAL: intVal = 1; break;\n            case LINE_SCALE_MODE.HORIZONTAL: intVal = 2; break;\n            case LINE_SCALE_MODE.VERTICAL: intVal = 3; break;\n        }\n        this.shader.uniforms.scaleMode = intVal\n    }\n\n    get scaleMode(): LINE_SCALE_MODE {\n        return this._scaleMode\n    }\n\n    private _scaleMode : LINE_SCALE_MODE\n\n    clear() {\n        (this.geometry as PlotGeometry).reset();\n    }\n\n    _renderDefault(renderer: Renderer): void {\n        const geometry = this.geometry as PlotGeometry;\n\n        if (geometry.points.length < 4) {\n            return;\n        }\n\n        const useLegacy = !renderer.geometry.hasInstance;\n        if (useLegacy) {\n            geometry.initLegacy(renderer.context.supports.uint32Indices);\n        }\n        geometry.updateBuffer();\n        if (geometry.instanceCount === 0) {\n            return;\n        }\n        const rt = renderer.renderTexture.current;\n        const multisample = rt ? rt.framebuffer.multisample > 1 : renderer.options.antialias;\n        const resolution = this.shader.uniforms.resolution = (rt ? rt.baseTexture.resolution : renderer.resolution);\n        this.shader.uniforms.expand = (multisample ? 2 : 1) / resolution;\n\n        if (useLegacy) {\n            // hacky!\n            (this as any).geometry = geometry.legacyGeom;\n            super._renderDefault(renderer);\n            (this as any).geometry = geometry;\n            return;\n        }\n        super._renderDefault(renderer);\n    }\n\n    _renderCanvas(renderer: CanvasRenderer): void {\n        const {points, stridePoints, capStyle, joinStyle} = this.geometry as PlotGeometry;\n        const {context} = renderer;\n        const len = points.length;\n        if (len < 2) {\n            return;\n        }\n        const wt = this.transform.worldTransform;\n        renderer.setContextTransform(wt);\n\n        const scale = Math.sqrt(wt.a * wt.a + wt.b * wt.b);\n        context.lineWidth = this.shader.uniforms.styleLine[0] + this.shader.uniforms.styleLine[1] / scale;\n\n        context.strokeStyle = hex2string(this.tint);\n        context.globalAlpha = this.worldAlpha;\n        context.lineCap = capStyle;\n        context.lineJoin = joinStyle;\n\n        context.beginPath();\n        context.moveTo(points[0], points[1]);\n        for (let i = 2; i < points.length; i += stridePoints) {\n            context.lineTo(points[i], points[i + 1]);\n        }\n        context.stroke();\n        context.beginPath();\n\n        context.globalAlpha = 1.0;\n    }\n}\n","import {Buffer, Geometry, Program, Texture, Renderer} from '@pixi/core';\nimport {CanvasRenderer} from '@pixi/canvas-renderer';\nimport {Mesh, MeshMaterial} from '@pixi/mesh';\nimport {createIndicesForQuads, hex2string, rgb2hex, hex2rgb} from '@pixi/utils';\nimport {LINE_JOIN} from '@pixi/graphics';\nimport {TYPES} from '@pixi/constants';\n\nimport {Plot, PlotGeometry} from './Plot';\n\nconst gradVert = `\nattribute vec2 aVertexPosition;\n\nuniform mat3 projectionMatrix;\nuniform mat3 translationMatrix;\nuniform vec2 rangeY;\n\nvarying float vOrdinate;\n\nvoid main(void)\n{\nvec2 pos = (translationMatrix * vec3(aVertexPosition, 1.0)).xy;\nif (pos.y > rangeY.y) {\n    pos.y = rangeY.y;\n}\ngl_Position = vec4((projectionMatrix * vec3(pos, 1.0)).xy, 0.0, 1.0);\nvOrdinate = pos.y;\n}`;\nconst gradFrag = `\nvarying float vOrdinate;\n\nuniform vec4 colorTop;\nuniform vec4 colorBottom;\nuniform vec4 uColor;\nuniform vec2 rangeY2;\n\nvoid main(void)\n{\nvec4 color = colorTop;\nif (vOrdinate > rangeY2.x) {\n    if (vOrdinate >= rangeY2.y) {\n        color = colorBottom;\n    } else {\n        color = colorTop + (colorBottom - colorTop) * (vOrdinate - rangeY2.x) / (rangeY2.y - rangeY2.x);\n    }\n}\n\ncolor.rgb *= color.a;\ngl_FragColor = color * uColor;\n}\n`;\n\nexport class PlotGradientShader extends MeshMaterial {\n    static _prog: Program = null;\n\n    static getProgram(): Program {\n        if (!PlotGradientShader._prog) {\n            PlotGradientShader._prog = new Program(gradVert, gradFrag);\n        }\n        return PlotGradientShader._prog;\n    }\n\n    constructor() {\n        const rangeY = new Float32Array(2);\n        super(Texture.WHITE, {\n            uniforms: {\n                resolution: 1,\n                colorTop: new Float32Array([1, 1, 1, 1]),\n                colorBottom: new Float32Array([1, 1, 1, 1]),\n                rangeY: rangeY,\n                rangeY2: rangeY,\n            },\n            program: PlotGradientShader.getProgram()\n        });\n    }\n}\n\nexport class PlotGradientGeometry extends Geometry {\n    constructor(_static = false) {\n        super();\n        this.initGeom(_static);\n        this.reset();\n    }\n\n    lastLen = 0;\n    lastPointNum = 0;\n    lastPointData = 0;\n    points: Array<number> = [];\n    _floatView: Float32Array = null;\n    _buffer: Buffer = null;\n\n    initGeom(_static: boolean) {\n        this._buffer = new Buffer(new Float32Array(0), _static, false);\n\n        this.addAttribute('aVertexPosition', this._buffer, 2, false, TYPES.FLOAT);\n    }\n\n    stridePoints = 2;\n    strideFloats = 2 * 6;\n    strideBytes = 8 * 6;\n\n    moveTo(x: number, y: number) {\n        const {points} = this;\n        points.push(x);\n        points.push(y);\n    }\n\n    lineTo(x: number, y: number) {\n        const {points} = this;\n        points.push(x);\n        points.push(y);\n    }\n\n    invalidate(pointNum = 0) {\n        this.lastPointNum = Math.min(pointNum, this.lastPointNum);\n    }\n\n    reset() {\n        if (this.lastLen > 0) {\n            this.clearBufferData();\n        }\n        this.lastLen = 0;\n        this.lastPointData = 0;\n        this.points.length = 0;\n    }\n\n    clearBufferData() {\n        const {points, strideFloats, stridePoints} = this;\n        this.lastPointNum = 0;\n        this.lastPointData = 0;\n        const arrayLen = Math.max(0, points.length / stridePoints - 1);\n        this._floatView = new Float32Array(strideFloats * arrayLen);\n        this._buffer.update(this._floatView);\n        this.lastLen = points.length;\n    }\n\n    updateBuffer() {\n        const {points, stridePoints, strideFloats} = this;\n\n        if (this.lastLen > points.length) {\n            this.lastLen = -1;\n        }\n        if (this.lastLen < points.length\n            || this.lastPointNum < this.lastLen) { // TODO: partial upload\n            this.clearBufferData();\n        }\n\n        if (this.lastPointNum == this.lastLen) {\n            return;\n        }\n\n        const {_floatView} = this;\n        this.lastPointData = Math.min(this.lastPointData, this.lastPointNum);\n        let j = Math.round(this.lastPointNum * strideFloats / stridePoints);\n        for (let i = this.lastPointNum; i < points.length - stridePoints; i += stridePoints) {\n            const next = i + stridePoints;\n\n            const x = points[i], y = points[i + 1], x2 = points[next], y2 = points[next + 1];\n\n            const bottomLine = 10000.0;\n\n            _floatView[j++] = x;\n            _floatView[j++] = y;\n            _floatView[j++] = x2;\n            _floatView[j++] = y2;\n            _floatView[j++] = x2;\n            _floatView[j++] = bottomLine;\n            _floatView[j++] = x;\n            _floatView[j++] = y;\n            _floatView[j++] = x2;\n            _floatView[j++] = bottomLine;\n            _floatView[j++] = x;\n            _floatView[j++] = bottomLine;\n        }\n        this._buffer.update();\n\n        this.lastPointNum = this.lastLen;\n        this.lastPointData = this.lastLen; // TODO: partial upload\n    }\n}\n\nexport class PlotGradient extends Mesh {\n    constructor() {\n        super(new PlotGradientGeometry(), new PlotGradientShader());\n    }\n\n    get coordTop(): number {\n        return this.shader.uniforms.rangeY[0];\n    }\n\n    set coordTop(value: number) {\n        this.shader.uniforms.rangeY[0] = value;\n    }\n\n    get coordBottom(): number {\n        return this.shader.uniforms.rangeY[1];\n    }\n\n    set coordBottom(value: number) {\n        this.shader.uniforms.rangeY[1] = value;\n    }\n\n    get alphaTop(): number {\n        return this.shader.uniforms.colorTop[3];\n    }\n\n    set alphaTop(value: number) {\n        this.shader.uniforms.colorTop[3] = value;\n    }\n\n    get alphaBottom(): number {\n        return this.shader.uniforms.colorBottom[3];\n    }\n\n    set alphaBottom(value: number) {\n        this.shader.uniforms.colorBottom[3] = value;\n    }\n\n    get colorBottom(): number {\n        return rgb2hex(this.shader.uniforms.colorBottom);\n    }\n\n    set colorBottom(value: number) {\n        hex2rgb(value, this.shader.uniforms.colorBottom);\n    }\n\n    get colorTop(): number {\n        return rgb2hex(this.shader.uniforms.colorTop);\n    }\n\n    set colorTop(value: number) {\n        hex2rgb(value, this.shader.uniforms.colorTop);\n    }\n\n    masterPlot: Plot = null;\n    plotUpdateId = -1;\n\n    clear() {\n        if (!this.masterPlot) {\n            (this.geometry as PlotGradientGeometry).reset();\n        }\n    }\n\n    moveTo(x: number, y: number) {\n        this.lineTo(x, y);\n    }\n\n    lineTo(x: number, y: number) {\n        if (!this.masterPlot) {\n            (this.geometry as PlotGradientGeometry).lineTo(x, y);\n        }\n    }\n\n    _render(renderer: Renderer): void {\n        const geom = this.geometry as PlotGradientGeometry;\n        if (this.masterPlot) {\n            const plotGeom = this.masterPlot.geometry as PlotGeometry;\n            if (this.plotUpdateId !== plotGeom.updateId) {\n                this.plotUpdateId = plotGeom.updateId;\n                geom.points = plotGeom.points;\n                geom.invalidate();\n            }\n        }\n        geom.updateBuffer();\n\n        this._renderDefault(renderer);\n    }\n\n    _renderCanvas(renderer: CanvasRenderer): void {\n        const geom = this.geometry as PlotGradientGeometry;\n        // let points = geom.points;\n        // if (this.masterPlot) {\n        //     const plotGeom = this.masterPlot.geometry as PlotGeometry;\n        //     if (this.plotUpdateId !== plotGeom.updateId) {\n        //         this.plotUpdateId = plotGeom.updateId\n        //         geom.points = plotGeom.points;\n        //     }\n        // }\n        //\n        //\n        // const {points, stridePoints} = this.geometry as BarsGeometry;\n        // const {context} = renderer;\n        // const len = points.length;\n        // if (len < 2) {\n        //     return;\n        // }\n        // const wt = this.transform.worldTransform;\n        // renderer.setContextTransform(wt);\n        //\n        // const scale = Math.sqrt(wt.a * wt.a + wt.b * wt.b);\n        // context.lineWidth = this.shader.uniforms.lineWidth[0] + this.shader.uniforms.lineWidth[1] / scale;\n        //\n        // context.strokeStyle = utils.hex2string(this.tint);\n        // context.globalAlpha = this.worldAlpha;\n        //\n        // context.beginPath();\n        // context.moveTo(points[0], points[1]);\n        // for (let i = 2; i < points.length; i += stridePoints) {\n        //     context.lineTo(points[i], points[i + 1]);\n        // }\n        // context.stroke();\n        // context.beginPath();\n        //\n        // context.globalAlpha = 1.0;\n    }\n}\n"],"names":["MeshMaterial","Texture","Program","Geometry","Buffer","TYPES","createIndicesForQuads","Mesh","hex2string","JOINT_TYPE","LINE_SCALE_MODE","LINE_JOIN","LINE_CAP","rgb2hex","hex2rgb"],"mappings":"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"}